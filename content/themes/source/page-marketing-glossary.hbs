{{!< default}}
{{!-- Custom Marketing Glossary Page Template --}}

{{#post}}
<main class="gh-main marketing-glossary-page">
    
    {{#match @page.show_title_and_feature_image}}
        <header class="gh-article-header gh-canvas">
            <h1 class="gh-article-title is-title">{{title}}</h1>
            {{#if custom_excerpt}}
                <p class="gh-article-excerpt is-body">{{custom_excerpt}}</p>
            {{/if}}
            {{> "feature-image"}}
        </header>
    {{/match}}

    <section class="gh-content gh-canvas is-body">
        {{content}}
    </section>

    <!-- Beautiful Marketing Glossary Section -->
    <section class="gh-glossary gh-outer">
        <div class="gh-glossary-inner gh-inner">
            <div class="gh-glossary-header">
                <h2 class="gh-glossary-title">Marketing Glossary</h2>
                <p class="gh-glossary-subtitle">Your comprehensive guide to essential marketing terminology, insights, and industry knowledge.</p>
            </div>
            
            <!-- Configuration Notice -->
            <div id="config-notice" class="config-notice" style="display: none;">
                <div class="config-notice-content">
                    <h3>‚öôÔ∏è Configuration Needed</h3>
                    <p>To use the marketing glossary, you need to configure your Notion API connection.</p>
                    <details>
                        <summary>Quick Setup Instructions</summary>
                        <ol>
                            <li>Get your Notion database ID from the URL: https://notion.so/workspace/<strong>DATABASE_ID</strong>?v=...</li>
                            <li>Open browser developer tools (F12)</li>
                            <li>Go to the Console tab</li>
                            <li>Run: <code>setupGlossaryConfig('YOUR_TOKEN', 'YOUR_DATABASE_ID')</code></li>
                        </ol>
                        <p>See the setup guide for detailed instructions.</p>
                    </details>
                </div>
            </div>
            
            <!-- Search and Filter Section -->
            <div class="glossary-controls">
                <div class="search-container">
                    <input type="text" id="glossary-search" placeholder="Search marketing terms..." class="glossary-search-input">
                    <div class="search-icon">üîç</div>
                </div>
                
                <div class="filter-container">
                    <select id="category-filter" class="category-filter">
                        <option value="">All Categories</option>
                    </select>
                </div>
                
                <div class="alphabet-filter">
                    <button class="alphabet-btn active" data-letter="">All</button>
                    <button class="alphabet-btn" data-letter="A">A</button>
                    <button class="alphabet-btn" data-letter="B">B</button>
                    <button class="alphabet-btn" data-letter="C">C</button>
                    <button class="alphabet-btn" data-letter="D">D</button>
                    <button class="alphabet-btn" data-letter="E">E</button>
                    <button class="alphabet-btn" data-letter="F">F</button>
                    <button class="alphabet-btn" data-letter="G">G</button>
                    <button class="alphabet-btn" data-letter="H">H</button>
                    <button class="alphabet-btn" data-letter="I">I</button>
                    <button class="alphabet-btn" data-letter="J">J</button>
                    <button class="alphabet-btn" data-letter="K">K</button>
                    <button class="alphabet-btn" data-letter="L">L</button>
                    <button class="alphabet-btn" data-letter="M">M</button>
                    <button class="alphabet-btn" data-letter="N">N</button>
                    <button class="alphabet-btn" data-letter="O">O</button>
                    <button class="alphabet-btn" data-letter="P">P</button>
                    <button class="alphabet-btn" data-letter="Q">Q</button>
                    <button class="alphabet-btn" data-letter="R">R</button>
                    <button class="alphabet-btn" data-letter="S">S</button>
                    <button class="alphabet-btn" data-letter="T">T</button>
                    <button class="alphabet-btn" data-letter="U">U</button>
                    <button class="alphabet-btn" data-letter="V">V</button>
                    <button class="alphabet-btn" data-letter="W">W</button>
                    <button class="alphabet-btn" data-letter="X">X</button>
                    <button class="alphabet-btn" data-letter="Y">Y</button>
                    <button class="alphabet-btn" data-letter="Z">Z</button>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-state" class="loading-state">
                <div class="loading-spinner"></div>
                <p>Loading marketing glossary...</p>
            </div>

            <!-- Error State -->
            <div id="error-state" class="error-state" style="display: none;">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h3>Unable to load glossary</h3>
                <p>Please check your Notion API configuration and try again.</p>
                <button id="retry-btn" class="retry-btn">Retry</button>
            </div>

            <!-- Glossary Results -->
            <div class="glossary-results">
                <div class="results-count">
                    <span id="results-count">0 terms found</span>
                </div>
                
                <div id="glossary-grid" class="glossary-grid">
                    <!-- Terms will be populated here via JavaScript -->
                </div>
            </div>

            <!-- No Results State -->
            <div id="no-results" class="no-results" style="display: none;">
                <div class="no-results-icon">üìù</div>
                <h3>No terms found</h3>
                <p>Try adjusting your search or filter criteria.</p>
            </div>
            
        </div>
    </section>

    <!-- Term Modal -->
    <div id="term-modal" class="term-modal" style="display: none;">
        <div class="term-modal-overlay"></div>
        <div class="term-modal-content">
            <button class="term-modal-close">&times;</button>
            <div class="term-modal-body">
                <!-- Modal content will be populated via JavaScript -->
            </div>
        </div>
    </div>

</main>

<style>
/* Marketing Glossary Styles - Modern Square Design */
.marketing-glossary-page {
    --glossary-primary: var(--color-primary-text);
    --glossary-secondary: var(--color-secondary-text);
    --glossary-accent: var(--ghost-accent-color, #3366ff);
    --glossary-text: var(--color-primary-text);
    --glossary-border: rgba(255, 255, 255, 0.2);
    --glossary-hover: rgba(255, 255, 255, 0.1);
}

/* Main Glossary Section */
.gh-glossary {
    padding: 80px 0;
    background: linear-gradient(to bottom, 
        rgba(248, 250, 252, 0.6) 0%,
        rgba(241, 245, 249, 0.8) 100%);
    position: relative;
}

:root.has-light-text .gh-glossary {
    background: linear-gradient(to bottom, 
        rgba(15, 23, 42, 0.6) 0%,
        rgba(30, 41, 59, 0.8) 100%);
}

.gh-glossary-inner {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 clamp(24px, 4vw, 64px);
}

.gh-glossary-header {
    text-align: center;
    margin-bottom: 64px;
}

.gh-glossary-title {
    font-family: var(--gh-font-heading, var(--font-sans));
    font-size: clamp(3.2rem, 4vw, 4.8rem);
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: -0.022em;
    color: var(--color-primary-text);
    margin: 0 0 16px 0;
}

.gh-glossary-subtitle {
    font-size: clamp(1.6rem, 2.5vw, 1.9rem);
    line-height: 1.5;
    letter-spacing: -0.01em;
    color: var(--color-secondary-text);
    margin: 0;
    max-width: 600px;
    margin: 0 auto 40px auto;
}

/* Configuration Notice */
.config-notice {
    background: rgba(255, 243, 199, 0.9);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(245, 158, 11, 0.3);
    padding: 2rem;
    margin: 2rem 0;
    color: #92400e;
}

.config-notice-content h3 {
    margin: 0 0 0.5rem 0;
    color: #92400e;
    font-weight: 650;
}

.config-notice-content code {
    background: rgba(255, 255, 255, 0.7);
    padding: 4px 8px;
    font-family: monospace;
    border: 1px solid rgba(245, 158, 11, 0.3);
}

/* Modern Controls Section */
.glossary-controls {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 32px;
    margin: 32px 0 64px 0;
    display: flex;
    flex-direction: column;
    gap: 24px;
}

:root.has-light-text .glossary-controls {
    background: rgba(30, 41, 59, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.search-container {
    position: relative;
    max-width: 500px;
}

.glossary-search-input {
    width: 100%;
    padding: 16px 50px 16px 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    font-size: 16px;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: rgba(255, 255, 255, 0.9);
    color: var(--color-primary-text);
}

:root.has-light-text .glossary-search-input {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

.glossary-search-input:focus {
    border-color: var(--ghost-accent-color, #3366ff);
    outline: none;
    box-shadow: 0 0 0 4px rgba(51, 102, 255, 0.1);
    transform: translateY(-2px);
}

.search-icon {
    position: absolute;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-secondary-text);
    font-size: 18px;
}

.filter-container {
    max-width: 280px;
}

.category-filter {
    width: 100%;
    padding: 16px 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    font-size: 16px;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.9);
    color: var(--color-primary-text);
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

:root.has-light-text .category-filter {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

.category-filter:focus {
    border-color: var(--ghost-accent-color, #3366ff);
    outline: none;
    transform: translateY(-2px);
}

.alphabet-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    justify-content: center;
}

.alphabet-btn {
    min-width: 44px;
    height: 44px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    cursor: pointer;
    font-weight: 600;
    font-size: 14px;
    color: var(--color-primary-text);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
}

:root.has-light-text .alphabet-btn {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
    color: #fff;
}

.alphabet-btn:hover,
.alphabet-btn.active {
    background: var(--ghost-accent-color, #3366ff);
    color: white;
    border-color: var(--ghost-accent-color, #3366ff);
    transform: translateY(-3px);
}

/* Beautiful Loading, Error, and No Results States */
.loading-state,
.error-state,
.no-results {
    text-align: center;
    padding: 4rem 2rem;
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    margin: 2rem 0;
}

:root.has-light-text .loading-state,
:root.has-light-text .error-state,
:root.has-light-text .no-results {
    background: rgba(30, 41, 59, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.loading-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid rgba(51, 102, 255, 0.2);
    border-top: 4px solid var(--ghost-accent-color, #3366ff);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1.5rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-icon,
.no-results-icon {
    font-size: 3.5rem;
    margin-bottom: 1.5rem;
    opacity: 0.7;
}

.retry-btn {
    background: var(--ghost-accent-color, #3366ff);
    color: white;
    border: none;
    padding: 14px 28px;
    cursor: pointer;
    font-weight: 600;
    font-size: 16px;
    margin-top: 1.5rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.retry-btn:hover {
    background: #2757e7;
    transform: translateY(-2px);
}

/* Results Section */
.results-count {
    margin: 2rem 0 1.5rem;
    font-weight: 600;
    font-size: 1.2rem;
    color: var(--color-secondary-text);
    text-align: center;
}

/* Modern Square Glossary Grid */
.glossary-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 32px;
    margin-bottom: 4rem;
}

/* Square Glossary Term Cards */
.glossary-term {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 32px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    cursor: pointer;
    height: 100%;
    display: flex;
    flex-direction: column;
    animation: fadeInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

:root.has-light-text .glossary-term {
    background: rgba(30, 41, 59, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.glossary-term::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, 
        var(--ghost-accent-color, #3366ff) 0%, 
        rgba(51, 102, 255, 0.7) 100%);
    transform: scaleX(0);
    transition: transform 0.3s ease;
    transform-origin: left;
}

.glossary-term:hover::before {
    transform: scaleX(1);
}

.glossary-term:hover {
    transform: translateY(-8px);
    border-color: rgba(255, 255, 255, 0.4);
}

:root.has-light-text .glossary-term:hover {
    border-color: rgba(255, 255, 255, 0.3);
}

/* Hierarchical Text Styling */
.term-title {
    font-family: var(--gh-font-heading, var(--font-sans));
    font-size: 2.2rem;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: -0.02em;
    color: var(--color-primary-text);
    margin: 0 0 12px 0;
}

.term-badges {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 16px;
    align-items: center;
}

.term-category {
    display: inline-block;
    background: var(--ghost-accent-color, #3366ff);
    color: white;
    padding: 4px 10px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    width: fit-content;
}

.term-use-case {
    display: inline-block;
    background: rgba(34, 197, 94, 0.1);
    color: #059669;
    border: 1px solid rgba(34, 197, 94, 0.2);
    padding: 4px 10px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    width: fit-content;
}

:root.has-light-text .term-use-case {
    background: rgba(34, 197, 94, 0.2);
    color: #10b981;
    border-color: rgba(34, 197, 94, 0.3);
}

.term-definition {
    color: var(--color-primary-text);
    line-height: 1.6;
    margin: 0 0 24px 0;
    flex-grow: 1;
    opacity: 0.9;
    font-size: 1.1rem;
    font-weight: 400;
}

.term-read-more {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    font-size: 1rem;
    font-weight: 600;
    color: var(--ghost-accent-color, #3366ff);
    transition: all 0.3s ease;
    text-decoration: none;
    margin-top: auto;
}

.term-read-more:hover {
    color: var(--color-primary-text);
    gap: 12px;
}

.term-read-more svg {
    width: 16px;
    height: 16px;
    transition: transform 0.3s ease;
}

.term-read-more:hover svg {
    transform: translateX(4px);
}

/* Search Highlighting */
.glossary-term mark {
    background: rgba(255, 235, 59, 0.6);
    padding: 2px 4px;
    font-weight: 600;
    color: inherit;
}

:root.has-light-text .glossary-term mark {
    background: rgba(255, 193, 7, 0.8);
    color: #000;
}

/* Enhanced Modal Styles */
.term-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
}

.term-modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.75);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
}

.term-modal-content {
    position: relative;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    max-width: 700px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
}

:root.has-light-text .term-modal-content {
    background: rgba(30, 41, 59, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.term-modal-close {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--color-secondary-text);
    z-index: 10;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

:root.has-light-text .term-modal-close {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.term-modal-close:hover {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    transform: scale(1.05);
}

.term-modal-body {
    padding: 3rem;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .glossary-grid {
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 28px;
    }
    
    .glossary-term {
        padding: 28px;
    }
}

@media (max-width: 991px) {
    .gh-glossary {
        padding: 64px 0;
    }
    
    .gh-glossary-inner {
        padding: 0 40px;
    }
    
    .gh-glossary-header {
        margin-bottom: 48px;
    }
    
    .glossary-controls {
        padding: 24px;
        gap: 20px;
    }
    
    .glossary-grid {
        gap: 24px;
    }
}

@media (max-width: 767px) {
    .gh-glossary {
        padding: 48px 0;
    }
    
    .gh-glossary-inner {
        padding: 0 32px;
    }
    
    .gh-glossary-header {
        margin-bottom: 40px;
    }
    
    .glossary-controls {
        padding: 20px;
        gap: 16px;
    }
    
    .alphabet-filter {
        justify-content: center;
    }
    
    .alphabet-btn {
        min-width: 40px;
        height: 40px;
        font-size: 13px;
    }
    
    .glossary-grid {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    
    .glossary-term {
        padding: 24px;
    }
    
    .term-title {
        font-size: 1.6rem;
        margin-bottom: 14px;
    }
    
    .term-definition {
        margin-bottom: 20px;
    }
    
    .term-modal-content {
        margin: 1rem;
        max-height: calc(100vh - 2rem);
        border-radius: 20px;
    }
    
    .term-modal-body {
        padding: 2rem;
    }
}

@media (max-width: 480px) {
    .gh-glossary {
        padding: 40px 0;
    }
    
    .gh-glossary-inner {
        padding: 0 24px;
    }
    
    .glossary-controls {
        padding: 16px;
        gap: 14px;
    }
    
    .alphabet-btn {
        min-width: 36px;
        height: 36px;
        font-size: 12px;
    }
    
    .glossary-term {
        padding: 20px;
    }
    
    .term-title {
        font-size: 1.5rem;
    }
    
    .term-definition {
        font-size: 0.95rem;
    }
    
    .term-modal-body {
        padding: 1.5rem;
    }
}

@media (max-width: 360px) {
    .gh-glossary-inner {
        padding: 0 20px;
    }
    
    .glossary-term {
        padding: 18px;
    }
    
    .term-title {
        font-size: 1.4rem;
    }
}

/* Entrance Animation for Cards */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Loading Pulse Animation */
@keyframes pulse {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.7;
    }
}

.loading-state p {
    animation: pulse 2s infinite;
}
</style>

<!-- Load Configuration File with cache busting -->
<script src="{{asset "js/glossary-config.js"}}?v=999999"></script>

<!-- Pass Ghost custom settings to JavaScript -->
<script>
// Pass Ghost custom settings to the glossary configuration
window.ghostCustomSettings = {
    notion_integration_token: '{{@custom.notion_integration_token}}'
};

// IMMEDIATE DEBUG - Check what we got from Ghost
console.log('üö® IMMEDIATE DEBUG - Ghost Custom Settings:');
console.log('Ghost settings object:', window.ghostCustomSettings);
console.log('Token from Ghost:', window.ghostCustomSettings.notion_integration_token);
console.log('Token length:', window.ghostCustomSettings.notion_integration_token ? window.ghostCustomSettings.notion_integration_token.length : 0);
console.log('Token starts with ntn_:', window.ghostCustomSettings.notion_integration_token ? window.ghostCustomSettings.notion_integration_token.startsWith('ntn_') : false);

// NOW LOAD THE CONFIGURATION AFTER GHOST SETTINGS ARE AVAILABLE
setTimeout(() => {
    console.log('üîÑ Loading glossary configuration...');
    const configResult = window.loadGlossarySettings();
    console.log('üîÑ Configuration loading result:', configResult);
}, 100);
</script>

<script>
// Marketing Glossary Notion Integration
class MarketingGlossary {
    constructor() {
        this.config = window.GLOSSARY_CONFIG || {};
        this.terms = [];
        this.filteredTerms = [];
        this.categories = new Set();
        
        this.init();
    }
    
    async init() {
        await this.loadConfig();
        if (!this.validateConfig()) {
            this.showConfigNotice();
            return;
        }
        
        this.hideConfigNotice();
        await this.fetchTerms();
        this.setupEventListeners();
        this.renderTerms();
    }
    
    async loadConfig() {
        // Apply theme colors if configured
        if (this.config.theme) {
            const root = document.documentElement;
            Object.keys(this.config.theme).forEach(key => {
                const cssVar = '--glossary-' + key.replace(/([A-Z])/g, '-$1').toLowerCase();
                root.style.setProperty(cssVar, this.config.theme[key]);
            });
        }
    }
    
    validateConfig() {
        return this.config.notionDatabaseId && this.config.notionToken;
    }
    
    showConfigNotice() {
        document.getElementById('config-notice').style.display = 'block';
        document.getElementById('loading-state').style.display = 'none';
        document.querySelector('.glossary-controls').style.display = 'none';
        document.querySelector('.glossary-results').style.display = 'none';
    }
    
    hideConfigNotice() {
        document.getElementById('config-notice').style.display = 'none';
    }
    
    async fetchTerms() {
        // COMPREHENSIVE DEBUG LOGGING
        console.log('üö® FETCH TERMS DEBUG:');
        console.log('this.config:', this.config);
        console.log('Database ID being used:', this.config.notionDatabaseId);
        console.log('Token being used:', this.config.notionToken ? this.config.notionToken.substring(0, 10) + '...' : 'NONE');
        console.log('Token length:', this.config.notionToken ? this.config.notionToken.length : 0);
        console.log('Token starts with ntn_:', this.config.notionToken ? this.config.notionToken.startsWith('ntn_') : false);
        
        const cacheKey = 'notion_glossary_cache';
        const cacheDuration = this.config.ui?.cacheDuration || 5 * 60 * 1000;
        
        // Check cache first if enabled
        if (this.config.ui?.enableCaching !== false) {
            const cached = localStorage.getItem(cacheKey);
            if (cached) {
                try {
                    const { data, timestamp } = JSON.parse(cached);
                    if (Date.now() - timestamp < cacheDuration) {
                        this.processTerms(data);
                        this.hideLoading();
                        return;
                    }
                } catch (error) {
                    console.warn('Failed to load cached data:', error);
                }
            }
        }
        
        try {
            let apiUrl, requestOptions;
            
            if (this.config.useLocalProxy && this.config.corsProxy) {
                // Use local proxy server
                apiUrl = `${this.config.corsProxy}${this.config.notionDatabaseId}/query`;
                requestOptions = {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${this.config.notionToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        // Remove sorting for now to test basic data fetching
                    })
                };
            } else {
                // Direct API call (will have CORS issues in browser)
                apiUrl = `https://api.notion.com/v1/databases/${this.config.notionDatabaseId}/query`;
                requestOptions = {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${this.config.notionToken}`,
                        'Content-Type': 'application/json',
                        'Notion-Version': '2022-06-28'
                    },
                    body: JSON.stringify({
                        // Remove sorting for now to test basic data fetching
                    })
                };
            }
            
            console.log('üîÑ Final API URL:', apiUrl);
            console.log('üîÑ Request headers:', requestOptions.headers);
            const response = await fetch(apiUrl, requestOptions);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // Cache the results if enabled
            if (this.config.ui?.enableCaching !== false) {
                try {
                    localStorage.setItem(cacheKey, JSON.stringify({
                        data: data.results,
                        timestamp: Date.now()
                    }));
                } catch (error) {
                    console.warn('Failed to cache data:', error);
                }
            }
            
            this.processTerms(data.results);
            this.hideLoading();
            
        } catch (error) {
            console.error('Error fetching from Notion:', error);
            this.showError('Failed to load terms from Notion. Please check your API configuration.');
        }
    }
    
    processTerms(results) {
        const mapping = this.config.propertyMapping || {};
        
        this.terms = results.map(page => {
            const properties = page.properties;
            
            // Extract term data from Notion properties using configured mapping
            const term = {
                id: page.id,
                name: this.extractText(properties[mapping.name] || properties.Name || properties.Term || properties.Title),
                definition: this.extractText(properties[mapping.definition] || properties.Definition || properties.Description),
                category: this.extractSelect(properties[mapping.category] || properties.Category),
                useCase: this.extractText(properties[mapping.useCase] || properties['Use Case'] || properties.UseCase),
                tags: this.extractMultiSelect(properties[mapping.tags] || properties.Tags),
                url: page.url,
                lastEdited: page.last_edited_time
            };
            
            if (term.category) {
                this.categories.add(term.category);
            }
            
            return term;
        }).filter(term => term.name); // Filter out terms without names
        
        this.filteredTerms = [...this.terms];
        this.populateCategories();
        
        console.log('‚úÖ Processed terms:', this.terms.length);
        console.log('üìù Sample term:', this.terms[0]);
        console.log('üè∑Ô∏è Categories found:', Array.from(this.categories));
    }
    
    extractText(property) {
        if (!property) return '';
        
        if (property.title) {
            return property.title.map(text => text.plain_text).join('');
        }
        if (property.rich_text) {
            return property.rich_text.map(text => text.plain_text).join('');
        }
        return '';
    }
    
    extractSelect(property) {
        return property?.select?.name || '';
    }
    
    extractMultiSelect(property) {
        return property?.multi_select?.map(item => item.name) || [];
    }
    
    populateCategories() {
        if (this.config.ui?.enableCategoryFilter === false) return;
        
        const categoryFilter = document.getElementById('category-filter');
        Array.from(this.categories).sort().forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
        });
    }
    
    setupEventListeners() {
        console.log('üîß Setting up event listeners...');
        
        // Search functionality
        const searchInput = document.getElementById('glossary-search');
        if (searchInput && this.config.ui?.enableSearch !== false) {
            console.log('‚úÖ Setting up search listener');
            searchInput.addEventListener('input', (e) => {
                console.log('üîç Search input changed:', e.target.value);
                this.filterTerms();
            });
        } else {
            console.warn('‚ùå Search input not found or disabled');
        }
        
        // Category filter
        const categoryFilter = document.getElementById('category-filter');
        if (categoryFilter && this.config.ui?.enableCategoryFilter !== false) {
            console.log('‚úÖ Setting up category filter listener');
            categoryFilter.addEventListener('change', (e) => {
                console.log('üè∑Ô∏è Category filter changed:', e.target.value);
                this.filterTerms();
            });
        } else {
            console.warn('‚ùå Category filter not found or disabled');
        }
        
        // Alphabet filter
        if (this.config.ui?.enableAlphabetFilter !== false) {
            console.log('‚úÖ Setting up alphabet filter listeners');
            document.querySelectorAll('.alphabet-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    console.log('üî§ Alphabet filter clicked:', e.target.dataset.letter);
                    document.querySelectorAll('.alphabet-btn').forEach(b => b.classList.remove('active'));
                    e.target.classList.add('active');
                    this.filterTerms();
                });
            });
        }
        
        // Modal functionality
        if (this.config.ui?.enableModal !== false) {
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('term-modal-overlay') || e.target.classList.contains('term-modal-close')) {
                    this.closeModal();
                }
            });
            
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    this.closeModal();
                }
            });
        }
        
        // Retry button
        const retryBtn = document.getElementById('retry-btn');
        if (retryBtn) {
            retryBtn.addEventListener('click', () => {
                console.log('üîÑ Retry button clicked');
                this.hideError();
                this.showLoading();
                this.fetchTerms();
            });
        }
        
        console.log('üéâ Event listeners setup complete');
    }
    
    filterTerms() {
        const searchInput = document.getElementById('glossary-search');
        const categoryFilter = document.getElementById('category-filter');
        const activeLetterBtn = document.querySelector('.alphabet-btn.active');
        
        const searchTerm = searchInput ? searchInput.value.toLowerCase().trim() : '';
        const selectedCategory = categoryFilter ? categoryFilter.value : '';
        const selectedLetter = activeLetterBtn ? activeLetterBtn.dataset.letter || '' : '';
        
        console.log('üîç Filtering with:');
        console.log('  Search term:', searchTerm);
        console.log('  Selected category:', selectedCategory);
        console.log('  Selected letter:', selectedLetter);
        console.log('  Total terms before filter:', this.terms.length);
        
        this.filteredTerms = this.terms.filter(term => {
            const matchesSearch = !searchTerm || 
                term.name.toLowerCase().includes(searchTerm) || 
                term.definition.toLowerCase().includes(searchTerm) ||
                (term.useCase && term.useCase.toLowerCase().includes(searchTerm)) ||
                (term.category && term.category.toLowerCase().includes(searchTerm));
            
            const matchesCategory = !selectedCategory || term.category === selectedCategory;
            
            const matchesLetter = !selectedLetter || 
                term.name.charAt(0).toUpperCase() === selectedLetter;
            
            return matchesSearch && matchesCategory && matchesLetter;
        });
        
        console.log('  Filtered terms:', this.filteredTerms.length);
        
        this.renderTerms();
    }
    
    renderTerms() {
        const grid = document.getElementById('glossary-grid');
        const resultsCount = document.getElementById('results-count');
        const noResults = document.getElementById('no-results');
        
        resultsCount.textContent = `${this.filteredTerms.length} ${this.filteredTerms.length === 1 ? 'term' : 'terms'} found`;
        
        if (this.filteredTerms.length === 0) {
            grid.innerHTML = '';
            noResults.style.display = 'block';
            return;
        }
        
        noResults.style.display = 'none';
        
        const previewLength = this.config.ui?.previewLength || 120;
        
        // Clear existing content
        grid.innerHTML = '';
        
        // Create cards with staggered animation
        this.filteredTerms.forEach((term, index) => {
            const card = document.createElement('article');
            card.className = 'glossary-term';
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.transitionDelay = `${index * 0.1}s`;
            
            const categoryBadge = term.category ? 
                `<span class="term-category">${this.escapeHtml(term.category)}</span>` : '';
            
            const useCaseBadge = term.useCase ? 
                `<span class="term-use-case">${this.escapeHtml(term.useCase)}</span>` : '';
            
            const definition = this.truncateText(this.escapeHtml(term.definition), previewLength);
            
            card.innerHTML = `
                <div class="gh-skill-content">
                    <h3 class="term-title">${this.escapeHtml(term.name)}</h3>
                    <div class="term-badges">
                        ${categoryBadge}${useCaseBadge}
                    </div>
                    <p class="term-definition">${definition}</p>
                    <a href="#" class="term-read-more" onclick="event.preventDefault();">
                        Read full definition
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M5 12h14"></path>
                            <path d="M12 5l7 7-7 7"></path>
                        </svg>
                    </a>
                </div>
            `;
            
            // Add click handler for modal
            card.addEventListener('click', (e) => {
                if (e.target.tagName !== 'A' && !e.target.closest('a')) {
                    this.showTermModal(term.id);
                }
            });
            
            // Add hover sound effect (optional)
            card.addEventListener('mouseenter', () => {
                if (this.config.ui?.enableSoundEffects) {
                    // Play subtle hover sound if enabled
                    this.playHoverSound();
                }
            });
            
            grid.appendChild(card);
            
            // Trigger animation
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, 50 + (index * 100));
        });
        
        // Add search result highlighting if there's a search term
        const searchTerm = document.getElementById('glossary-search').value.toLowerCase();
        if (searchTerm) {
            this.highlightSearchTerms(searchTerm);
        }
    }
    
    highlightSearchTerms(searchTerm) {
        const cards = document.querySelectorAll('.glossary-term');
        cards.forEach(card => {
            const title = card.querySelector('.term-title');
            const definition = card.querySelector('.term-definition');
            
            if (title) {
                title.innerHTML = this.highlightText(title.textContent, searchTerm);
            }
            if (definition) {
                definition.innerHTML = this.highlightText(definition.textContent, searchTerm);
            }
        });
    }
    
    highlightText(text, searchTerm) {
        if (!searchTerm) return this.escapeHtml(text);
        
        const regex = new RegExp(`(${this.escapeRegex(searchTerm)})`, 'gi');
        return this.escapeHtml(text).replace(regex, '<mark style="background: rgba(255, 235, 59, 0.6); padding: 2px 4px; border-radius: 3px; font-weight: 600;">$1</mark>');
    }
    
    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    playHoverSound() {
        // Simple hover sound effect (very subtle)
        if (typeof AudioContext !== 'undefined') {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.01, audioContext.currentTime + 0.01);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.1);
            } catch (error) {
                // Silently fail if audio context not available
            }
        }
    }
    
    showTermModal(termId) {
        if (this.config.ui?.enableModal === false) return;
        
        const term = this.terms.find(t => t.id === termId);
        if (!term) return;
        
        const modal = document.getElementById('term-modal');
        const body = modal.querySelector('.term-modal-body');
        
        const categoryBadge = term.category ? 
            `<span class="term-category" style="margin-bottom: 1.5rem; display: inline-block; margin-right: 8px;">${this.escapeHtml(term.category)}</span>` : '';
        
        const useCaseBadge = term.useCase ? 
            `<span class="term-use-case" style="margin-bottom: 1.5rem; display: inline-block;">${this.escapeHtml(term.useCase)}</span>` : '';
        
        body.innerHTML = `
            <h2 style="color: var(--glossary-primary); margin-bottom: 1rem; font-size: 2rem;">${this.escapeHtml(term.name)}</h2>
            <div style="margin-bottom: 1.5rem;">
                ${categoryBadge}${useCaseBadge}
            </div>
            <div style="line-height: 1.8; font-size: 1.1rem; color: var(--glossary-text);">
                ${this.formatDefinition(term.definition)}
            </div>
            ${term.tags.length > 0 ? `
                <div style="margin-top: 2rem; padding-top: 1.5rem; border-top: 1px solid var(--glossary-border);">
                    <strong style="color: var(--glossary-text); margin-bottom: 0.5rem; display: block;">Related Tags:</strong>
                    <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                        ${term.tags.map(tag => `<span style="background: var(--glossary-secondary); padding: 4px 8px; font-size: 0.9rem;">${this.escapeHtml(tag)}</span>`).join('')}
                    </div>
                </div>
            ` : ''}
        `;
        
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
    
    closeModal() {
        const modal = document.getElementById('term-modal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    formatDefinition(text) {
        return text.replace(/\n/g, '<br>');
    }
    
    truncateText(text, length) {
        if (text.length <= length) return text;
        return text.substr(0, length) + '...';
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    showLoading() {
        document.getElementById('loading-state').style.display = 'block';
        document.getElementById('error-state').style.display = 'none';
        document.querySelector('.glossary-results').style.display = 'none';
    }
    
    hideLoading() {
        document.getElementById('loading-state').style.display = 'none';
        document.querySelector('.glossary-results').style.display = 'block';
    }
    
    showError(message) {
        document.getElementById('loading-state').style.display = 'none';
        document.getElementById('error-state').style.display = 'block';
        document.querySelector('.glossary-results').style.display = 'none';
        
        const errorState = document.getElementById('error-state');
        const errorMessage = errorState.querySelector('p');
        if (errorMessage) {
            errorMessage.textContent = message;
        }
    }
    
    hideError() {
        document.getElementById('error-state').style.display = 'none';
    }
}

// Initialize the glossary when the page loads
document.addEventListener('DOMContentLoaded', () => {
    // Wait for configuration to be loaded properly
    setTimeout(() => {
        console.log('üöÄ Initializing Marketing Glossary...');
        
        // Make sure configuration is loaded
        if (typeof window.loadGlossarySettings === 'function') {
            const configResult = window.loadGlossarySettings();
            console.log('üîß Final config result before init:', configResult);
        }
        
        // Initialize the glossary
        window.glossary = new MarketingGlossary();
    }, 200);
});

// Backward compatibility functions
window.setNotionConfig = function(databaseId, token) {
    if (window.setupGlossaryConfig) {
        window.setupGlossaryConfig(databaseId, token);
    } else {
        localStorage.setItem('notion_database_id', databaseId);
        localStorage.setItem('notion_token', token);
        location.reload();
    }
};

window.clearNotionConfig = function() {
    if (window.GLOSSARY_CONFIG) {
        window.GLOSSARY_CONFIG.notionDatabaseId = '';
        window.GLOSSARY_CONFIG.notionToken = '';
    }
    localStorage.removeItem('notion_database_id');
    localStorage.removeItem('notion_token');
    localStorage.removeItem('glossary_config');
    location.reload();
};
</script>

{{/post}} 